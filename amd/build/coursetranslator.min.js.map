{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import libs\nimport ajax from \"core/ajax\";\n\n/**\n * Translation Editor UI\n * @param {Object} config JS Config\n */\nexport const init = (config) => {\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    var support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      var parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n\n    // If DOMParser is supported, use it\n    if (support) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n\n    // Otherwise, fallback to old-school method\n    var dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches && matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n\n  /**\n   * Switch Translation Language\n   */\n  let localeSwitcher = document.querySelector(\n    \".local-coursetranslator__localeswitcher\"\n  );\n  localeSwitcher.addEventListener(\"change\", (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"course_lang\", e.target.value);\n    let newUrl = url.toString();\n\n    window.location = newUrl;\n  });\n\n  /**\n   * Show Updated Checkbox\n   */\n  let showUpdatedCheckbox = document.querySelector(\n    \".local-coursetranslator__show-updated\"\n  );\n  showUpdatedCheckbox.addEventListener(\"change\", (e) => {\n    let items = document.querySelectorAll('[data-status=\"updated\"]');\n    if (e.target.checked) {\n      items.forEach((item) => {\n        item.classList.remove(\"d-none\");\n      });\n    } else {\n      items.forEach((item) => {\n        item.classList.add(\"d-none\");\n      });\n    }\n  });\n\n  /**\n   * Show Update Needed Checkbox\n   */\n  let showUpdateNeededCheckbox = document.querySelector(\n    \".local-coursetranslator__show-needsupdate\"\n  );\n  showUpdateNeededCheckbox.addEventListener(\"change\", (e) => {\n    let items = document.querySelectorAll('[data-status=\"needsupdate\"]');\n    if (e.target.checked) {\n      items.forEach((item) => {\n        item.classList.remove(\"d-none\");\n      });\n    } else {\n      items.forEach((item) => {\n        item.classList.add(\"d-none\");\n      });\n    }\n  });\n\n  /**\n   * Select All Checkbox\n   */\n  const selectAll = document.querySelector(\n    \".local-coursetranslator__select-all\"\n  );\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n  selectAll.addEventListener(\"click\", (e) => {\n    // See if select all is checked\n    let checked = e.target.checked;\n    let checkboxes = document.querySelectorAll(\n      \".local-coursetranslator__checkbox\"\n    );\n\n    // Check/uncheck checkboxes\n    if (checked) {\n      checkboxes.forEach((e) => {\n        e.checked = true;\n      });\n    } else {\n      checkboxes.forEach((e) => {\n        e.checked = false;\n      });\n    }\n    toggleAutotranslateButton();\n  });\n\n  /**\n   * Autotranslate Checkboxes\n   */\n  const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n  /**\n   * Autotranslate Button Display\n   * @returns void\n   */\n  const autotranslateButton = document.querySelector(\n    \".local-coursetranslator__autotranslate-btn\"\n  );\n\n  /**\n   * Toggle Autotranslate Button\n   */\n  const toggleAutotranslateButton = () => {\n    let checkboxItems = [];\n    checkboxes.forEach((e) => {\n      checkboxItems.push(e.checked);\n    });\n    let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n    if (config.autotranslate && checked) {\n      autotranslateButton.disabled = false;\n    } else {\n      autotranslateButton.disabled = true;\n    }\n  };\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   */\n  autotranslateButton.addEventListener(\"click\", () => {\n    document\n      .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .forEach((e) => {\n        let key = e.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n  });\n\n  /**\n   * Send for Translation to DeepL\n   * @param {Integer} key Translation Key\n   */\n  const getTranslation = (key) => {\n    // Get the editor\n    let editor = document.querySelector(\n      '.local-coursetranslator__editor[data-key=\"' +\n        key +\n        '\"] [contenteditable=\"true\"]'\n    );\n\n    // Get the source text\n    let sourceText = document.querySelector(\n      '[data-sourcetext-key=\"' + key + '\"]'\n    ).innerHTML;\n\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    formData.append(\"source_lang\", \"en\");\n    formData.append(\"target_lang\", config.lang);\n    formData.append(\"preserve_formatting\", 1);\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", \"xml\");\n    formData.append(\"split_sentences\", \"nonewlines\");\n\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        var status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          // The request has been completed successfully\n          let data = JSON.parse(xhr.responseText);\n          window.console.log(\"deepl:\", key, data);\n          // Display translation\n          editor.innerHTML = data.translations[0].text;\n          // Save translation\n          saveTranslation(key, editor, data.translations[0].text);\n        } else {\n          // Oh no! There has been an error with the request!\n          window.console.log(\"error\", status);\n        }\n      }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n  };\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   */\n  const saveTranslation = (key, editor, text) => {\n    let params = keyparser(key);\n\n    // Get the latest field data\n    let fielddata = {};\n    fielddata.courseid = config.courseid;\n    fielddata.id = parseInt(params.id);\n    fielddata.table = params.table;\n    fielddata.field = params.field;\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          // Field text exists\n          if (data.length > 0) {\n            // The latests field text so multiple translators can work at the same time\n            let fieldtext = data[0].text;\n            window.console.log(fieldtext);\n\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n              '.local-coursetranslator__textarea[data-key=\"' + key + '\"]'\n            );\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = Object.assign(params, {\n              courseid: config.courseid,\n              text: updatedtext\n            });\n\n            // Success Message\n            const successMessage = () => {\n              editor.classList.add(\"local-coursetranslator__success\");\n              // Add saved indicator\n              let indicator =\n                '<div class=\"local-coursetranslator__success-message\" data-key=\"' +\n                key +\n                '\">' +\n                config.autosavedmsg +\n                \"</div>\";\n              editor.after(...stringToHTML(indicator));\n\n              let status = document.querySelector(\n                '[data-status-key=\"' + key + '\"'\n              );\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;\n\n              // Remove success message after a few seconds\n              setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                  '.local-coursetranslator__success-message[data-key=\"' +\n                    key +\n                    '\"]'\n                );\n                editor.parentNode.removeChild(indicatorNode);\n              }, 3000);\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              window.console.log(error);\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.value = data[0].text;\n\n                    // Update source lang if necessary\n                    if (config.currentlang === config.lang) {\n                      document.querySelector(\n                        '[data-sourcetext-key=\"' + key + '\"]'\n                      ).innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage();\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error);\n                },\n              },\n            ]);\n          } else {\n            // Something went wrong with field retrieval\n            window.console.log(data);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          window.console.log(error);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Key Parser to return params\n   * @param {string} key Key string\n   * @returns {object}\n   */\n  const keyparser = (key) => {\n    let keys = key.split('-');\n    let params = {};\n    params.table = keys[0];\n    params.field = keys[1];\n    params.id = parseInt(keys[2]);\n    params.tid = parseInt(keys[3]);\n    return params;\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = '{mlang ' + lang + '}' + text + '{mlang}';\n\n    // Return new mlang text if mlang has not been used before\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return (\n          \"{mlang other}\" +\n          fieldtext +\n          \"{mlang}{mlang \" +\n          lang +\n          \"}\" +\n          text +\n          \"{mlang}\"\n        );\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, \"dgis\");\n    let matches = fieldtext.match(replacex);\n\n    // Return the updated string\n    if (!matches) {\n      return fieldtext + \"{mlang \" + lang + \"}\" + text + \"{mlang}\";\n    } else {\n      return fieldtext.replace(\n        replacex,\n        \"{mlang \" + lang + \"}\" + text + \"{mlang}\"\n      );\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    document\n      .querySelectorAll(\n        '.local-coursetranslator__editor [contenteditable=\"true\"]'\n      )\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          // Get Processing Information\n          let text = editor.innerHTML;\n          let element = editor.closest(\".local-coursetranslator__editor\");\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener(\"load\", () => {\n\n    // Get all textareas\n    let textareas = document.querySelectorAll(\n      \".local-coursetranslator__textarea\"\n    );\n\n    // Populate editors based on textarea text\n    textareas.forEach((textarea) => {\n\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.value;\n      let editor = document.querySelector(\n        '[data-key=\"' + key + '\"] [contenteditable=\"true\"]'\n      );\n\n      // Get mlang matches\n      let langpattern = \"{mlang \" + config.lang + \"}(.*?){mlang}\";\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        document\n          .querySelector('input[type=\"checkbox\"][data-key=\"' + key + '\"]')\n          .remove();\n        document\n          .querySelector(\n            '.local-coursetranslator__editor[data-key=\"' + key + '\"] > *'\n          )\n          .remove();\n        document\n          .querySelector(\n            '.local-coursetranslator__textarea[data-key=\"' + key + '\"]'\n          )\n          .remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = \"<em><small>\" + config.multiplemlang + \"</small></em>\";\n        document\n          .querySelector(\n            '.local-coursetranslator__editor[data-key=\"' + key + '\"]'\n          )\n          .append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n\n    // Listen for textarea changes and update db/editors\n    textareas.forEach(textarea => {\n      textarea.addEventListener('focusout', () => {\n\n        // Get relevant keys and text\n        let key = textarea.getAttribute(\"data-key\");\n        let text = textarea.value;\n        let editor = document.querySelector(\n          '[data-key=\"' + key + '\"] [contenteditable=\"true\"]'\n        );\n\n        // Parse the text for mlang\n        let parsedtext = mlangparser(text);\n        saveTranslation(key, editor, parsedtext);\n\n      });\n    });\n  });\n};\n"],"names":["config","searchex","mlangparser","text","match","result","replace","lang","blocklang","split","blocktext","replacecallback","length","mlangex","RegExp","matches","document","querySelector","addEventListener","e","url","URL","window","location","href","searchParams","set","target","value","newUrl","toString","items","querySelectorAll","checked","forEach","item","classList","remove","add","selectAll","autotranslate","disabled","checkboxes","toggleAutotranslateButton","autotranslateButton","checkboxItems","push","find","key","getAttribute","getTranslation","editor","sourceText","innerHTML","formData","FormData","append","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","data","JSON","parse","responseText","console","log","translations","saveTranslation","open","deeplurl","send","params","keyparser","fielddata","courseid","id","parseInt","table","field","call","methodname","args","done","fieldtext","textarea","updatedtext","getupdatedtext","tdata","Object","assign","successMessage","indicator","autosavedmsg","after","string","DOMParser","parser","parseFromString","err","body","childNodes","dom","createElement","stringToHTML","uptodate","setTimeout","indicatorNode","parentNode","removeChild","errorMessage","error","currentlang","fail","keys","tid","mlangtext","indexOf","pattern","replacex","closest","textareas","langpattern","langex","parsedtext","p","multiplemlang"],"mappings":"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"}