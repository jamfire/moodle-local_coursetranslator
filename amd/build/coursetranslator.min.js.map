{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import libs\nimport ajax from \"core/ajax\";\n\n/**\n * Translation Editor UI\n * @param {Object} config JS Config\n */\nexport const init = (config) => {\n\n  /**\n   * Convert a template string into HTML DOM nodes\n   * @param  {String} string The template string\n   * @return {Node}       The template HTML\n   */\n  const stringToHTML = (string) => {\n    // See if DOMParser is supported\n    var support = (() => {\n      if (!window.DOMParser) {\n        return false;\n      }\n      var parser = new DOMParser();\n      try {\n        parser.parseFromString(\"x\", \"text/html\");\n      } catch (err) {\n        return false;\n      }\n      return true;\n    })();\n\n    // If DOMParser is supported, use it\n    if (support) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(string, \"text/html\");\n      return doc.body.childNodes;\n    }\n\n    // Otherwise, fallback to old-school method\n    var dom = document.createElement(\"div\");\n    dom.innerHTML = string;\n    return dom;\n  };\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex = /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/gisd;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n\n    // Search for {mlang} not found.\n    if (\n      text.match(searchex) === null\n    ) {\n      return text;\n    }\n\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      }\n      return '';\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // Return the found string.\n    return result;\n  };\n\n  /**\n   * Switch Translation Language\n   */\n  let localeSwitcher = document.querySelector(\n    \".local-coursetranslator__localeswitcher\"\n  );\n  localeSwitcher.addEventListener(\"change\", (e) => {\n    let url = new URL(window.location.href);\n    let searchParams = url.searchParams;\n    searchParams.set(\"course_lang\", e.target.value);\n    let newUrl = url.toString();\n\n    window.location = newUrl;\n  });\n\n  /**\n   * Select All Checkbox\n   */\n  const selectAll = document.querySelector(\n    \".local-coursetranslator__select-all\"\n  );\n  if (config.autotranslate) {\n    selectAll.disabled = false;\n  }\n  selectAll.addEventListener(\"click\", (e) => {\n    // See if select all is checked\n    let checked = e.target.checked;\n    let checkboxes = document.querySelectorAll(\n      \".local-coursetranslator__checkbox\"\n    );\n\n    // Check/uncheck checkboxes\n    if (checked) {\n      checkboxes.forEach((e) => {\n        e.checked = true;\n      });\n    } else {\n      checkboxes.forEach((e) => {\n        e.checked = false;\n      });\n    }\n    toggleAutotranslateButton();\n  });\n\n  /**\n   * Autotranslate Checkboxes\n   */\n  const checkboxes = document.querySelectorAll(\n    \".local-coursetranslator__checkbox\"\n  );\n  if (config.autotranslate) {\n    checkboxes.forEach((e) => {\n      e.disabled = false;\n    });\n  }\n  checkboxes.forEach((e) => {\n    e.addEventListener(\"change\", () => {\n      toggleAutotranslateButton();\n    });\n  });\n\n  /**\n   * Autotranslate Button Display\n   * @returns void\n   */\n  const autotranslateButton = document.querySelector(\n    \".local-coursetranslator__autotranslate-btn\"\n  );\n\n  /**\n   * Toggle Autotranslate Button\n   */\n  const toggleAutotranslateButton = () => {\n    let checkboxItems = [];\n    checkboxes.forEach((e) => {\n      checkboxItems.push(e.checked);\n    });\n    let checked = checkboxItems.find((checked) => checked === true)\n      ? true\n      : false;\n    if (config.autotranslate && checked) {\n      autotranslateButton.disabled = false;\n    } else {\n      autotranslateButton.disabled = true;\n    }\n  };\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   */\n  autotranslateButton.addEventListener(\"click\", () => {\n    document\n      .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .forEach((e) => {\n        let key = e.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n  });\n\n  /**\n   * Send for Translation to DeepL\n   * @param {Integer} key Translation Key\n   */\n  const getTranslation = (key) => {\n    // Get the editor\n    let editor = document.querySelector(\n      '.local-coursetranslator__editor[data-key=\"' + key + '\"] [contenteditable=\"true\"]'\n    );\n\n    // Get the source text\n    let sourceText = document.querySelector(\n      '[data-sourcetext-key=\"' + key + '\"]'\n    ).innerHTML;\n\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    formData.append(\"source_lang\", \"en\");\n    formData.append(\"target_lang\", config.lang);\n    formData.append(\"preserve_formatting\", 1);\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", \"xml\");\n    formData.append(\"split_sentences\", \"nonewlines\");\n\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        var status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          // The request has been completed successfully\n          let data = JSON.parse(xhr.responseText);\n          window.console.log(\"deepl:\", key, data);\n          // Display translation\n          editor.innerHTML = data.translations[0].text;\n          // Save translation\n          saveTranslation(key, editor, data.translations[0].text);\n        } else {\n          // Oh no! There has been an error with the request!\n          window.console.log(\"error\", status);\n        }\n      }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n  };\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   */\n  const saveTranslation = (key, editor, text) => {\n    let element = editor.closest(\".local-coursetranslator__editor\");\n    let id = element.getAttribute(\"data-id\");\n    let tid = element.getAttribute(\"data-tid\");\n    let table = element.getAttribute(\"data-table\");\n    let field = element.getAttribute(\"data-field\");\n\n    // Updated hidden textarea with updatedtext\n    let textarea = document.querySelector('.local-coursetranslator__textarea[data-key=\"' + key + '\"]');\n    let updatedtext = getupdatedtext(textarea, text);\n    textarea.innerHTML = updatedtext;\n\n    // Build the data object\n    let data = {};\n    data.courseid = config.courseid;\n    data.id = parseInt(id);\n    data.tid = tid;\n    data.table = table;\n    data.field = field;\n    data.text = updatedtext;\n\n    // Success Message\n    const successMessage = () => {\n      editor.classList.add(\"local-coursetranslator__success\");\n      // Add saved indicator\n      let indicator =\n        '<div class=\"local-coursetranslator__success-message\" data-key=\"' +\n        key +\n        '\">' +\n        config.autosavedmsg +\n        \"</div>\";\n      editor.after(...stringToHTML(indicator));\n\n      let status = document.querySelector('[data-status-key=\"' + key + '\"');\n      status.classList.replace('badge-danger', 'badge-success');\n      status.innerHTML = config.uptodate;\n\n      // Remove success message after a few seconds\n      setTimeout(() => {\n        let indicatorNode = document.querySelector(\n          '.local-coursetranslator__success-message[data-key=\"' + key + '\"]'\n        );\n        editor.parentNode.removeChild(indicatorNode);\n      }, 3000);\n    };\n\n    // Error Mesage\n    const errorMessage = (error) => {\n      window.console.log(error);\n      editor.classList.add(\"local-coursetranslator__error\");\n    };\n\n    // Submit the request\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_update_translation\",\n        args: {\n          data: [data],\n        },\n        done: (data) => {\n          window.console.log(\"ws: \", key, data);\n          if (data.length > 0) {\n            successMessage();\n            if (config.currentlang === config.lang) {\n              document.querySelector('[data-sourcetext-key=\"' + key + '\"]').innerHTML = text;\n            }\n          } else {\n            errorMessage();\n          }\n        },\n        fail: (error) => {\n          errorMessage(error);\n        },\n      },\n    ]);\n\n  };\n\n  /**\n   * Update Textarea\n   * @param {node} textarea Hidden Textara\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (textarea, text) => {\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let textareatext = textarea.innerHTML;\n    if (textareatext.indexOf('{mlang') === -1) {\n      if (lang === 'other') {\n        return '{mlang other}' + text + '{mlang}';\n      } else {\n        return '{mlang other}' + textareatext + '{mlang}{mlang ' + lang + '}' + text + '{mlang}';\n      }\n    }\n\n    // Use regex to replace the string\n    let pattern = `{*mlang +(${lang})}(.*?){*mlang*}`;\n    let replacex = new RegExp(pattern, 'gim');\n    let matches = textareatext.match(replacex);\n\n    // Return the updated string\n    if (!matches) {\n      return textareatext + '{mlang ' + lang + '}' + text + '{mlang}';\n    } else {\n      return textareatext.replace(replacex, '{mlang ' + lang + '}' + text + '{mlang}');\n    }\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener('load', function() {\n    document\n      .querySelectorAll(\n        '.local-coursetranslator__editor [contenteditable=\"true\"]'\n      )\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          // Get Processing Information\n          let text = editor.innerHTML;\n          let element = editor.closest(\".local-coursetranslator__editor\");\n          let key = element.getAttribute(\"data-key\");\n\n          saveTranslation(key, editor, text);\n        });\n\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables\n   */\n  window.addEventListener('load', function() {\n    let textareas = document.querySelectorAll('.local-coursetranslator__textarea');\n    textareas.forEach(textarea => {\n      // Get relevent keys and text\n      let key = textarea.getAttribute('data-key');\n      let text = textarea.innerHTML;\n      let editor = document.querySelector('[data-key=\"' + key + '\"] [contenteditable=\"true\"]');\n\n      let lang = \"{mlang \" + config.lang + \"}(.*?){mlang}\";\n      let langex = new RegExp(lang, \"gisd\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        document.querySelector('input[type=\"checkbox\"][data-key=\"' + key + '\"]').remove();\n        document.querySelector('.local-coursetranslator__editor[data-key=\"' + key + '\"] > *').remove();\n        document.querySelector('.local-coursetranslator__textarea[data-key=\"' + key + '\"]').remove();\n        let p = document.createElement('p');\n        p.innerHTML = '<em><small>' + config.multiplemlang + '</small></em>';\n        this.document.querySelector('.local-coursetranslator__editor[data-key=\"' + key + '\"]').append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n\n    });\n  });\n\n};\n"],"names":["config","searchex","mlangparser","text","match","replace","lang","blocklang","split","blocktext","replacecallback","document","querySelector","addEventListener","e","url","URL","window","location","href","searchParams","set","target","value","newUrl","toString","selectAll","autotranslate","disabled","checked","checkboxes","querySelectorAll","forEach","toggleAutotranslateButton","autotranslateButton","checkboxItems","push","find","key","getAttribute","getTranslation","editor","sourceText","innerHTML","formData","FormData","append","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","data","JSON","parse","responseText","console","log","translations","saveTranslation","open","deeplurl","send","element","closest","id","tid","table","field","textarea","updatedtext","getupdatedtext","courseid","parseInt","successMessage","classList","add","indicator","autosavedmsg","after","string","DOMParser","parser","parseFromString","err","body","childNodes","dom","createElement","stringToHTML","uptodate","setTimeout","indicatorNode","parentNode","removeChild","errorMessage","error","call","methodname","args","done","length","currentlang","fail","textareatext","indexOf","pattern","replacex","RegExp","remove","langex","matches","parsedtext","p","multiplemlang","_this"],"mappings":"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"}