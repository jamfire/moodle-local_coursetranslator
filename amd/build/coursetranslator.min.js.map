{"version":3,"file":"coursetranslator.min.js","sources":["../src/coursetranslator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @module     local_coursetranslator/coursetranslator\n * @copyright  2022 Kaleb Heitzman <kaleb@jamfire.io>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import libs\nimport ajax from \"core/ajax\";\nimport notification from \"core/notification\";\n\n/**\n * Translation Editor UI\n * @param {Object} config JS Config\n */\nexport const init = (config) => {\n\n  /**\n   * {mlang} searchex regex\n   */\n  const searchex =\n    /{\\s*mlang\\s+((?:[a-z0-9_-]+)(?:\\s*,\\s*[a-z0-9_-]+\\s*)*)\\s*}(.*?){\\s*mlang\\s*}/dgis;\n\n  /**\n   * Search for mlang tags\n   *\n   * The code for this js parser was adapted from filter/multilang2\n   *\n   * @param {string} text Text with {mlang}\n   * @returns {string}\n   */\n  const mlangparser = (text) => {\n    // Search for {mlang} not found.\n    if (text.match(searchex) === null) {\n      return text;\n    }\n\n    // Replace callback for searchex results.\n    const replacecallback = (lang, match) => {\n      let blocklang = match.split(searchex)[1];\n      let blocktext = match.split(searchex)[2];\n      if (blocklang === lang) {\n        return blocktext;\n      } else {\n        return \"\";\n      }\n    };\n\n    // Get searchex results.\n    let result = text.replace(searchex, (match) => {\n      let lang = config.lang;\n      return replacecallback(lang, match);\n    });\n\n    // No results were found, return text in mlang other\n    // @todo: rewrite this to use searchex instead for more consistency\n    if (result.length === 0) {\n      let mlangpattern = \"{mlang other}(.*?){mlang}\";\n      let mlangex = new RegExp(mlangpattern, \"dgis\");\n      let matches = text.match(mlangex);\n      if (matches && matches[0].split(searchex)[2]) {\n        return matches[0].split(searchex)[2];\n      }\n    }\n\n    // Return the found string.\n    return result;\n  };\n\n  /**\n   * Autotranslate Button Click\n   * @returns void\n   */\n  const autotranslateButton = document.querySelector(\n    \".local-coursetranslator__autotranslate-btn\"\n  );\n  autotranslateButton.addEventListener(\"click\", () => {\n    document\n      .querySelectorAll(\".local-coursetranslator__checkbox:checked\")\n      .forEach((e) => {\n        let key = e.getAttribute(\"data-key\");\n        getTranslation(key);\n      });\n  });\n\n  /**\n   * Send for Translation to DeepL\n   * @param {Integer} key Translation Key\n   */\n  const getTranslation = (key) => {\n    // Get the editor\n    let editor = document.querySelector(\n      '.local-coursetranslator__editor[data-key=\"' +\n        key +\n        '\"] [contenteditable=\"true\"]'\n    );\n\n    // Get the source text\n    let sourceText = document.querySelector(\n      '[data-sourcetext-key=\"' + key + '\"]'\n    ).innerHTML;\n\n    // Build formData\n    let formData = new FormData();\n    formData.append(\"text\", sourceText);\n    formData.append(\"source_lang\", \"en\");\n    formData.append(\"target_lang\", config.lang);\n    formData.append(\"preserve_formatting\", 1);\n    formData.append(\"auth_key\", config.apikey);\n    formData.append(\"tag_handling\", \"xml\");\n    formData.append(\"split_sentences\", \"nonewlines\");\n\n    // Update the translation\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        var status = xhr.status;\n        if (status === 0 || (status >= 200 && status < 400)) {\n          // The request has been completed successfully\n          let data = JSON.parse(xhr.responseText);\n          // Display translation\n          editor.innerHTML = data.translations[0].text;\n          // Save translation\n          savetranslation(key, editor, data.translations[0].text);\n        } else {\n          // Oh no! There has been an error with the request!\n          notification.alert(config.error, status, config.continue);\n        }\n      }\n    };\n    xhr.open(\"POST\", config.deeplurl);\n    xhr.send(formData);\n  };\n\n  /**\n   * Save Translation to Moodle\n   * @param  {String} key Data Key\n   * @param  {Node} editor HTML Editor Node\n   * @param  {String} text Updated Text\n   */\n  const savetranslation = (key, editor, text) => {\n    let params = keyparser(key);\n    let format = parseInt(editor\n      .closest('.local-coursetranslator__editor')\n      .getAttribute('data-format'));\n\n    // Get the latest field data\n    let fielddata = Object.assign({}, {\n      courseid: config.courseid,\n      id: params.id,\n      table: params.table,\n      field: params.field,\n    });\n\n    // Get the latest data to parse text against.\n    ajax.call([\n      {\n        methodname: \"local_coursetranslator_get_field\",\n        args: {\n          data: [fielddata],\n        },\n        done: (data) => {\n          // Field text exists\n          if (data.length > 0) {\n            // The latests field text so multiple translators can work at the same time\n            let fieldtext = data[0].text;\n\n            // Updated hidden textarea with updatedtext\n            let textarea = document.querySelector(\n              '.local-coursetranslator__textarea[data-key=\"' + key + '\"]'\n            );\n            // Get the updated text\n            let updatedtext = getupdatedtext(fieldtext, text);\n\n            // Build the data object\n            let tdata = Object.assign(params, {\n              courseid: config.courseid,\n              text: updatedtext\n            });\n\n            // Success Message\n            const successMessage = () => {\n              editor.classList.add(\"local-coursetranslator__success\");\n              // Add saved indicator\n              let indicator = document.createElement('div');\n              indicator.classList.add('local-coursetranslator__success-message');\n              indicator.setAttribute('data-key', key);\n              indicator.innerHTML = config.autosavedmsg;\n              editor.after(indicator);\n\n              let status = document.querySelector(\n                '[data-status-key=\"' + key + '\"'\n              );\n              status.classList.replace(\"badge-danger\", \"badge-success\");\n              status.innerHTML = config.uptodate;\n\n              // Remove success message after a few seconds\n              setTimeout(() => {\n                let indicatorNode = document.querySelector(\n                  '.local-coursetranslator__success-message[data-key=\"' +\n                    key +\n                    '\"]'\n                );\n                editor.parentNode.removeChild(indicatorNode);\n              }, 3000);\n            };\n\n            // Error Mesage\n            const errorMessage = (error) => {\n              notification.alert(config.error, error, config.continue);\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Text too long\n            const textLengthError = () => {\n              let p = document.createElement('p');\n              p.classList.add('local-coursetranslator__textlengtherror');\n              p.setAttribute('data-key', key);\n              p.innerHTML = '<small><em>' + config.textlengtherror + '</em></small>';\n              editor.after(p);\n\n              editor.classList.add(\"local-coursetranslator__error\");\n            };\n\n            // Text is to long for varchar 255 field\n            if (format === 0 && updatedtext.length > 255) {\n              textLengthError();\n              return;\n            }\n\n            // Submit the request\n            ajax.call([\n              {\n                methodname: \"local_coursetranslator_update_translation\",\n                args: {\n                  data: [tdata],\n                },\n                done: (data) => {\n                  // Display success message\n                  if (data.length > 0) {\n                    successMessage();\n                    textarea.value = data[0].text;\n                    // Update source lang if necessary\n                    if (\n                      config.currentlang === config.lang\n                      || config.lang === 'other'\n                    ) {\n                      document.querySelector(\n                        '[data-sourcetext-key=\"' + key + '\"]'\n                      ).innerHTML = text;\n                    }\n                  } else {\n                    // Something went wrong with the data\n                    errorMessage(data);\n                  }\n                },\n                fail: (error) => {\n                  // An error occurred\n                  errorMessage(error.message);\n                },\n              },\n            ]);\n          }\n        },\n        fail: (error) => {\n          // An error occurred\n          notification.alert(config.error, error.error, config.continue);\n        },\n      },\n    ]);\n  };\n\n  /**\n   * Key Parser to return params\n   * @param {string} key Key string\n   * @returns {object}\n   */\n  const keyparser = (key) => {\n    let keys = key.split('-');\n    let params = {};\n    params.table = keys[0];\n    params.field = keys[1];\n    params.id = parseInt(keys[2]);\n    params.tid = parseInt(keys[3]);\n    return params;\n  };\n\n  /**\n   * Update Textarea\n   * @param {string} fieldtext Latest text from database\n   * @param {string} text Text to update\n   * @returns {string}\n   */\n  const getupdatedtext = (fieldtext, text) => {\n    // Get current lang\n    let lang = config.lang;\n\n    // Search for {mlang} not found.\n    let mlangtext = '{mlang ' + lang + '}' + text + '{mlang}';\n\n    /**\n     * {mlang} not found\n     * Create new mlang text if mlang has not been used before\n     */\n    if (fieldtext.indexOf(\"{mlang\") === -1) {\n      if (lang === \"other\") {\n        return mlangtext;\n      } else {\n        return \"{mlang other}\" + fieldtext + \"{mlang}{mlang \" + lang + \"}\" + text + \"{mlang}\";\n      }\n    }\n\n    // Check if mlang exists on text\n    let mlangexists = false;\n    let splits = fieldtext.match(searchex);\n    splits.forEach(split => {\n      let blocklang = split.split(searchex)[1];\n      if (blocklang === config.lang) {\n        mlangexists = true;\n      }\n    });\n\n    // Return updated text based on existing mlang\n    if (mlangexists) {\n      // Replace callback for searchex results.\n      const replacecallback = (match) => {\n        let blocklang = match.split(searchex)[1];\n        if (blocklang === config.lang) {\n          return '{mlang ' + config.lang + '}' + text + '{mlang}';\n        } else {\n          return match;\n        }\n      };\n\n      // Get searchex results.\n      let result = fieldtext.replace(searchex, (match) => {\n        return replacecallback(match);\n      });\n\n      return result;\n    } else {\n      // Append new mlang text to field text\n      return fieldtext + '{mlang ' + config.lang + '}' + text + '{mlang}';\n    }\n\n  };\n\n  /**\n   * Get the Translation using Moodle Web Service\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n    document\n      .querySelectorAll(\n        '.local-coursetranslator__editor [contenteditable=\"true\"]'\n      )\n      .forEach((editor) => {\n        // Save translation\n        editor.addEventListener(\"focusout\", () => {\n          // Get Processing Information\n          let text = editor.innerHTML;\n          let element = editor.closest(\".local-coursetranslator__editor\");\n          let key = element.getAttribute(\"data-key\");\n\n          savetranslation(key, editor, text);\n        });\n\n        // Remove status classes\n        editor.addEventListener(\"click\", () => {\n          let element = editor.closest(\".local-coursetranslator__editor\");\n          let key = element.getAttribute(\"data-key\");\n          editor.classList.remove(\"local-coursetranslator__success\");\n          editor.classList.remove(\"local-coursetranslator__error\");\n          let textlengtherror = document.querySelector('.local-coursetranslator__textlengtherror[data-key=\"' + key + '\"]');\n          if (textlengtherror) {\n            textlengtherror.remove();\n          }\n        });\n      });\n  });\n\n  /**\n   * Get text from processing areas and add them to contenteditables.\n   * Listen for focusout event and save field.\n   * @returns void\n   */\n  window.addEventListener(\"load\", () => {\n\n    // Get all textareas\n    let textareas = document.querySelectorAll(\n      \".local-coursetranslator__textarea\"\n    );\n\n    // Populate editors based on textarea text\n    textareas.forEach((textarea) => {\n\n      // Get relevent keys and text\n      let key = textarea.getAttribute(\"data-key\");\n      let text = textarea.value;\n      let editor = document.querySelector(\n        '[data-key=\"' + key + '\"] [contenteditable=\"true\"]'\n      );\n\n      // Get mlang matches\n      let langpattern = \"{mlang \" + config.lang + \"}(.*?){mlang}\";\n      let langex = new RegExp(langpattern, \"dgis\");\n      let matches = text.match(langex);\n\n      // Parse the text for mlang\n      let parsedtext = mlangparser(text);\n\n      if (matches && matches.length === 1) {\n        // Updated contenteditables with parsedtext\n        editor.innerHTML = parsedtext;\n      } else if (matches && matches.length > 1) {\n        document\n          .querySelector('input[type=\"checkbox\"][data-key=\"' + key + '\"]')\n          .remove();\n        document\n          .querySelector(\n            '.local-coursetranslator__editor[data-key=\"' + key + '\"] > *'\n          )\n          .remove();\n        let p = document.createElement(\"p\");\n        p.innerHTML = \"<em><small>\" + config.multiplemlang + \"</small></em>\";\n        document\n          .querySelector(\n            '.local-coursetranslator__editor[data-key=\"' + key + '\"]'\n          )\n          .append(p);\n      } else {\n        editor.innerHTML = parsedtext;\n      }\n    });\n\n    // Listen for textarea changes and update db/editors\n    textareas.forEach(textarea => {\n      textarea.addEventListener('focusout', () => {\n\n        // Get relevant keys and text\n        let key = textarea.getAttribute(\"data-key\");\n        let text = textarea.value;\n        let editor = document.querySelector(\n          '[data-key=\"' + key + '\"] [contenteditable=\"true\"]'\n        );\n\n        // Parse the text for mlang\n        let parsedtext = mlangparser(text);\n        savetranslation(key, editor, parsedtext);\n\n      });\n    });\n  });\n};\n"],"names":["config","searchex","mlangparser","text","match","result","replace","lang","blocklang","split","blocktext","replacecallback","length","mlangex","RegExp","matches","document","querySelector","addEventListener","querySelectorAll","forEach","e","key","getAttribute","getTranslation","editor","sourceText","innerHTML","formData","FormData","append","apikey","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","data","JSON","parse","responseText","translations","savetranslation","alert","error","continue","open","deeplurl","send","params","keyparser","format","parseInt","closest","fielddata","Object","assign","courseid","id","table","field","call","methodname","args","done","fieldtext","textarea","updatedtext","getupdatedtext","tdata","errorMessage","classList","add","p","createElement","setAttribute","textlengtherror","after","indicator","autosavedmsg","uptodate","setTimeout","indicatorNode","parentNode","removeChild","successMessage","value","currentlang","fail","message","keys","tid","mlangtext","indexOf","mlangexists","window","remove","textareas","langpattern","langex","parsedtext","multiplemlang"],"mappings":"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"}